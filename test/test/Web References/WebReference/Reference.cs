//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.42000。
// 
#pragma warning disable 1591

namespace iEMS_Setting.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WorkflowServiceSoapBinding", Namespace="http://webservice.nana.dsc.com/")]
    public partial class WorkflowServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback countWorkingTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback findManagerByAppLvlOperationCompleted;
        
        private System.Threading.SendOrPostCallback addCustomActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback addCustomParallelActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback addCustomParallelAndSerialActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback addCustomParallelAndSerialActivity1OperationCompleted;
        
        private System.Threading.SendOrPostCallback invokeProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback invokeProcess1OperationCompleted;
        
        private System.Threading.SendOrPostCallback completeWorkItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAbsenceRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchDueDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback reexecuteActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProcessPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchOrgUnitOfUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectsWithOrganizationIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback countWorkingDaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateDefaultSubstituteOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSubstituteStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchDefaultSubstituteInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchDefaultSubstituteInfo1OperationCompleted;
        
        private System.Threading.SendOrPostCallback findFormOIDsOfProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback reserveNoCmDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback bypassActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback abortProcessForSerialNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback acceptWorkItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback terminatedProcessForSerialNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback managementReassignWorkItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback assignRelevantDataBySerialNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback managementChangeWorkItemOwnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback addCloneSerialActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback isPerformerOfProcessInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchFullProcInstanceWithOIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchFullProcInstanceWithSerialNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchProcInstanceWithOIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchProcInstancesOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchClosedProcInstancesOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchProcInstanceWithSerialNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchFormInstanceWithProcOIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchFormInstanceWithProcSerlNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchUniFormatFormInstanceWithProcOIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchUniFormatFormInstanceWithProcSerlNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchProcSNMatchCurrtentPerformerOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchCanTraceProcSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchToDoWorkItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback increaseViewTimesOfWorkAssignmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback invokeProcessByOrgOperationCompleted;
        
        private System.Threading.SendOrPostCallback invokeProcessByOrg1OperationCompleted;
        
        private System.Threading.SendOrPostCallback invokeProcessAndAddCustActOperationCompleted;
        
        private System.Threading.SendOrPostCallback invokeProcessAndAddCustActByOrgOperationCompleted;
        
        private System.Threading.SendOrPostCallback invokeProcessByParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback invokeProcessByParameterByOrgOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFormFieldTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchFullProcInstanceWithSerialNoShowReferencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback importOrganizationDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback assigneeReassignWorkItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUserAbsenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchProcessContextVariableOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchProcessContextVariable1OperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchProcessAbortOrTerminateCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkWorkItemStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback addLabelToNoticeWorkItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeLabelFromNoticeWorkItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback fetchWorkItemCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WorkflowServiceService() {
            this.Url = global::iEMS_Setting.Properties.Settings.Default.iEMS_Setting_WebReference_WorkflowServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event countWorkingTimeCompletedEventHandler countWorkingTimeCompleted;
        
        /// <remarks/>
        public event findManagerByAppLvlCompletedEventHandler findManagerByAppLvlCompleted;
        
        /// <remarks/>
        public event addCustomActivityCompletedEventHandler addCustomActivityCompleted;
        
        /// <remarks/>
        public event addCustomParallelActivityCompletedEventHandler addCustomParallelActivityCompleted;
        
        /// <remarks/>
        public event addCustomParallelAndSerialActivityCompletedEventHandler addCustomParallelAndSerialActivityCompleted;
        
        /// <remarks/>
        public event addCustomParallelAndSerialActivity1CompletedEventHandler addCustomParallelAndSerialActivity1Completed;
        
        /// <remarks/>
        public event invokeProcessCompletedEventHandler invokeProcessCompleted;
        
        /// <remarks/>
        public event invokeProcess1CompletedEventHandler invokeProcess1Completed;
        
        /// <remarks/>
        public event completeWorkItemCompletedEventHandler completeWorkItemCompleted;
        
        /// <remarks/>
        public event removeAbsenceRecordCompletedEventHandler removeAbsenceRecordCompleted;
        
        /// <remarks/>
        public event fetchDueDateCompletedEventHandler fetchDueDateCompleted;
        
        /// <remarks/>
        public event reexecuteActivityCompletedEventHandler reexecuteActivityCompleted;
        
        /// <remarks/>
        public event getProcessPackageCompletedEventHandler getProcessPackageCompleted;
        
        /// <remarks/>
        public event fetchOrgUnitOfUserIdCompletedEventHandler fetchOrgUnitOfUserIdCompleted;
        
        /// <remarks/>
        public event getProjectsWithOrganizationIdCompletedEventHandler getProjectsWithOrganizationIdCompleted;
        
        /// <remarks/>
        public event countWorkingDaysCompletedEventHandler countWorkingDaysCompleted;
        
        /// <remarks/>
        public event updateDefaultSubstituteCompletedEventHandler updateDefaultSubstituteCompleted;
        
        /// <remarks/>
        public event getSubstituteStateCompletedEventHandler getSubstituteStateCompleted;
        
        /// <remarks/>
        public event fetchDefaultSubstituteInfoCompletedEventHandler fetchDefaultSubstituteInfoCompleted;
        
        /// <remarks/>
        public event fetchDefaultSubstituteInfo1CompletedEventHandler fetchDefaultSubstituteInfo1Completed;
        
        /// <remarks/>
        public event findFormOIDsOfProcessCompletedEventHandler findFormOIDsOfProcessCompleted;
        
        /// <remarks/>
        public event reserveNoCmDocumentCompletedEventHandler reserveNoCmDocumentCompleted;
        
        /// <remarks/>
        public event bypassActivityCompletedEventHandler bypassActivityCompleted;
        
        /// <remarks/>
        public event abortProcessForSerialNoCompletedEventHandler abortProcessForSerialNoCompleted;
        
        /// <remarks/>
        public event acceptWorkItemCompletedEventHandler acceptWorkItemCompleted;
        
        /// <remarks/>
        public event terminatedProcessForSerialNoCompletedEventHandler terminatedProcessForSerialNoCompleted;
        
        /// <remarks/>
        public event managementReassignWorkItemCompletedEventHandler managementReassignWorkItemCompleted;
        
        /// <remarks/>
        public event assignRelevantDataBySerialNoCompletedEventHandler assignRelevantDataBySerialNoCompleted;
        
        /// <remarks/>
        public event managementChangeWorkItemOwnerCompletedEventHandler managementChangeWorkItemOwnerCompleted;
        
        /// <remarks/>
        public event addCloneSerialActivityCompletedEventHandler addCloneSerialActivityCompleted;
        
        /// <remarks/>
        public event isPerformerOfProcessInstanceCompletedEventHandler isPerformerOfProcessInstanceCompleted;
        
        /// <remarks/>
        public event fetchFullProcInstanceWithOIDCompletedEventHandler fetchFullProcInstanceWithOIDCompleted;
        
        /// <remarks/>
        public event fetchFullProcInstanceWithSerialNoCompletedEventHandler fetchFullProcInstanceWithSerialNoCompleted;
        
        /// <remarks/>
        public event fetchProcInstanceWithOIDCompletedEventHandler fetchProcInstanceWithOIDCompleted;
        
        /// <remarks/>
        public event fetchProcInstancesCompletedEventHandler fetchProcInstancesCompleted;
        
        /// <remarks/>
        public event fetchClosedProcInstancesCompletedEventHandler fetchClosedProcInstancesCompleted;
        
        /// <remarks/>
        public event fetchProcInstanceWithSerialNoCompletedEventHandler fetchProcInstanceWithSerialNoCompleted;
        
        /// <remarks/>
        public event fetchFormInstanceWithProcOIDCompletedEventHandler fetchFormInstanceWithProcOIDCompleted;
        
        /// <remarks/>
        public event fetchFormInstanceWithProcSerlNoCompletedEventHandler fetchFormInstanceWithProcSerlNoCompleted;
        
        /// <remarks/>
        public event fetchUniFormatFormInstanceWithProcOIDCompletedEventHandler fetchUniFormatFormInstanceWithProcOIDCompleted;
        
        /// <remarks/>
        public event fetchUniFormatFormInstanceWithProcSerlNoCompletedEventHandler fetchUniFormatFormInstanceWithProcSerlNoCompleted;
        
        /// <remarks/>
        public event fetchProcSNMatchCurrtentPerformerCompletedEventHandler fetchProcSNMatchCurrtentPerformerCompleted;
        
        /// <remarks/>
        public event fetchCanTraceProcSNCompletedEventHandler fetchCanTraceProcSNCompleted;
        
        /// <remarks/>
        public event fetchToDoWorkItemCompletedEventHandler fetchToDoWorkItemCompleted;
        
        /// <remarks/>
        public event increaseViewTimesOfWorkAssignmentCompletedEventHandler increaseViewTimesOfWorkAssignmentCompleted;
        
        /// <remarks/>
        public event invokeProcessByOrgCompletedEventHandler invokeProcessByOrgCompleted;
        
        /// <remarks/>
        public event invokeProcessByOrg1CompletedEventHandler invokeProcessByOrg1Completed;
        
        /// <remarks/>
        public event invokeProcessAndAddCustActCompletedEventHandler invokeProcessAndAddCustActCompleted;
        
        /// <remarks/>
        public event invokeProcessAndAddCustActByOrgCompletedEventHandler invokeProcessAndAddCustActByOrgCompleted;
        
        /// <remarks/>
        public event invokeProcessByParameterCompletedEventHandler invokeProcessByParameterCompleted;
        
        /// <remarks/>
        public event invokeProcessByParameterByOrgCompletedEventHandler invokeProcessByParameterByOrgCompleted;
        
        /// <remarks/>
        public event getFormFieldTemplateCompletedEventHandler getFormFieldTemplateCompleted;
        
        /// <remarks/>
        public event fetchFullProcInstanceWithSerialNoShowReferencesCompletedEventHandler fetchFullProcInstanceWithSerialNoShowReferencesCompleted;
        
        /// <remarks/>
        public event importOrganizationDataCompletedEventHandler importOrganizationDataCompleted;
        
        /// <remarks/>
        public event assigneeReassignWorkItemCompletedEventHandler assigneeReassignWorkItemCompleted;
        
        /// <remarks/>
        public event addUserAbsenceCompletedEventHandler addUserAbsenceCompleted;
        
        /// <remarks/>
        public event fetchProcessContextVariableCompletedEventHandler fetchProcessContextVariableCompleted;
        
        /// <remarks/>
        public event fetchProcessContextVariable1CompletedEventHandler fetchProcessContextVariable1Completed;
        
        /// <remarks/>
        public event fetchProcessAbortOrTerminateCommentCompletedEventHandler fetchProcessAbortOrTerminateCommentCompleted;
        
        /// <remarks/>
        public event checkWorkItemStateCompletedEventHandler checkWorkItemStateCompleted;
        
        /// <remarks/>
        public event addLabelToNoticeWorkItemCompletedEventHandler addLabelToNoticeWorkItemCompleted;
        
        /// <remarks/>
        public event removeLabelFromNoticeWorkItemCompletedEventHandler removeLabelFromNoticeWorkItemCompleted;
        
        /// <remarks/>
        public event fetchWorkItemCountCompletedEventHandler fetchWorkItemCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("countWorkingTimeReturn")]
        public string countWorkingTime(string pUserId, string pStartDateTime, string pEndDateTime, string pDateFormat) {
            object[] results = this.Invoke("countWorkingTime", new object[] {
                        pUserId,
                        pStartDateTime,
                        pEndDateTime,
                        pDateFormat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void countWorkingTimeAsync(string pUserId, string pStartDateTime, string pEndDateTime, string pDateFormat) {
            this.countWorkingTimeAsync(pUserId, pStartDateTime, pEndDateTime, pDateFormat, null);
        }
        
        /// <remarks/>
        public void countWorkingTimeAsync(string pUserId, string pStartDateTime, string pEndDateTime, string pDateFormat, object userState) {
            if ((this.countWorkingTimeOperationCompleted == null)) {
                this.countWorkingTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OncountWorkingTimeOperationCompleted);
            }
            this.InvokeAsync("countWorkingTime", new object[] {
                        pUserId,
                        pStartDateTime,
                        pEndDateTime,
                        pDateFormat}, this.countWorkingTimeOperationCompleted, userState);
        }
        
        private void OncountWorkingTimeOperationCompleted(object arg) {
            if ((this.countWorkingTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.countWorkingTimeCompleted(this, new countWorkingTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("findManagerByAppLvlReturn")]
        public string findManagerByAppLvl(string pUserId, string pOrgUnitOID, string pLevelName, string pApprovalLevelType, bool pIsDeptManager) {
            object[] results = this.Invoke("findManagerByAppLvl", new object[] {
                        pUserId,
                        pOrgUnitOID,
                        pLevelName,
                        pApprovalLevelType,
                        pIsDeptManager});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void findManagerByAppLvlAsync(string pUserId, string pOrgUnitOID, string pLevelName, string pApprovalLevelType, bool pIsDeptManager) {
            this.findManagerByAppLvlAsync(pUserId, pOrgUnitOID, pLevelName, pApprovalLevelType, pIsDeptManager, null);
        }
        
        /// <remarks/>
        public void findManagerByAppLvlAsync(string pUserId, string pOrgUnitOID, string pLevelName, string pApprovalLevelType, bool pIsDeptManager, object userState) {
            if ((this.findManagerByAppLvlOperationCompleted == null)) {
                this.findManagerByAppLvlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindManagerByAppLvlOperationCompleted);
            }
            this.InvokeAsync("findManagerByAppLvl", new object[] {
                        pUserId,
                        pOrgUnitOID,
                        pLevelName,
                        pApprovalLevelType,
                        pIsDeptManager}, this.findManagerByAppLvlOperationCompleted, userState);
        }
        
        private void OnfindManagerByAppLvlOperationCompleted(object arg) {
            if ((this.findManagerByAppLvlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findManagerByAppLvlCompleted(this, new findManagerByAppLvlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void addCustomActivity(string pWorkItmeOID, string pPostActDefsAsXML) {
            this.Invoke("addCustomActivity", new object[] {
                        pWorkItmeOID,
                        pPostActDefsAsXML});
        }
        
        /// <remarks/>
        public void addCustomActivityAsync(string pWorkItmeOID, string pPostActDefsAsXML) {
            this.addCustomActivityAsync(pWorkItmeOID, pPostActDefsAsXML, null);
        }
        
        /// <remarks/>
        public void addCustomActivityAsync(string pWorkItmeOID, string pPostActDefsAsXML, object userState) {
            if ((this.addCustomActivityOperationCompleted == null)) {
                this.addCustomActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCustomActivityOperationCompleted);
            }
            this.InvokeAsync("addCustomActivity", new object[] {
                        pWorkItmeOID,
                        pPostActDefsAsXML}, this.addCustomActivityOperationCompleted, userState);
        }
        
        private void OnaddCustomActivityOperationCompleted(object arg) {
            if ((this.addCustomActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCustomActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void addCustomParallelActivity(string pWorkItmeOID, string pPostParallelActDefsAsXML) {
            this.Invoke("addCustomParallelActivity", new object[] {
                        pWorkItmeOID,
                        pPostParallelActDefsAsXML});
        }
        
        /// <remarks/>
        public void addCustomParallelActivityAsync(string pWorkItmeOID, string pPostParallelActDefsAsXML) {
            this.addCustomParallelActivityAsync(pWorkItmeOID, pPostParallelActDefsAsXML, null);
        }
        
        /// <remarks/>
        public void addCustomParallelActivityAsync(string pWorkItmeOID, string pPostParallelActDefsAsXML, object userState) {
            if ((this.addCustomParallelActivityOperationCompleted == null)) {
                this.addCustomParallelActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCustomParallelActivityOperationCompleted);
            }
            this.InvokeAsync("addCustomParallelActivity", new object[] {
                        pWorkItmeOID,
                        pPostParallelActDefsAsXML}, this.addCustomParallelActivityOperationCompleted, userState);
        }
        
        private void OnaddCustomParallelActivityOperationCompleted(object arg) {
            if ((this.addCustomParallelActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCustomParallelActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void addCustomParallelAndSerialActivity(string pWorkItmeOID, string pPostPSActDefsAsXML) {
            this.Invoke("addCustomParallelAndSerialActivity", new object[] {
                        pWorkItmeOID,
                        pPostPSActDefsAsXML});
        }
        
        /// <remarks/>
        public void addCustomParallelAndSerialActivityAsync(string pWorkItmeOID, string pPostPSActDefsAsXML) {
            this.addCustomParallelAndSerialActivityAsync(pWorkItmeOID, pPostPSActDefsAsXML, null);
        }
        
        /// <remarks/>
        public void addCustomParallelAndSerialActivityAsync(string pWorkItmeOID, string pPostPSActDefsAsXML, object userState) {
            if ((this.addCustomParallelAndSerialActivityOperationCompleted == null)) {
                this.addCustomParallelAndSerialActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCustomParallelAndSerialActivityOperationCompleted);
            }
            this.InvokeAsync("addCustomParallelAndSerialActivity", new object[] {
                        pWorkItmeOID,
                        pPostPSActDefsAsXML}, this.addCustomParallelAndSerialActivityOperationCompleted, userState);
        }
        
        private void OnaddCustomParallelAndSerialActivityOperationCompleted(object arg) {
            if ((this.addCustomParallelAndSerialActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCustomParallelAndSerialActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="addCustomParallelAndSerialActivity1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void addCustomParallelAndSerialActivity(string pProcessInstanceSN, string pActId, string pRefActId, string pPostPSActDefsAsXML) {
            this.Invoke("addCustomParallelAndSerialActivity1", new object[] {
                        pProcessInstanceSN,
                        pActId,
                        pRefActId,
                        pPostPSActDefsAsXML});
        }
        
        /// <remarks/>
        public void addCustomParallelAndSerialActivity1Async(string pProcessInstanceSN, string pActId, string pRefActId, string pPostPSActDefsAsXML) {
            this.addCustomParallelAndSerialActivity1Async(pProcessInstanceSN, pActId, pRefActId, pPostPSActDefsAsXML, null);
        }
        
        /// <remarks/>
        public void addCustomParallelAndSerialActivity1Async(string pProcessInstanceSN, string pActId, string pRefActId, string pPostPSActDefsAsXML, object userState) {
            if ((this.addCustomParallelAndSerialActivity1OperationCompleted == null)) {
                this.addCustomParallelAndSerialActivity1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCustomParallelAndSerialActivity1OperationCompleted);
            }
            this.InvokeAsync("addCustomParallelAndSerialActivity1", new object[] {
                        pProcessInstanceSN,
                        pActId,
                        pRefActId,
                        pPostPSActDefsAsXML}, this.addCustomParallelAndSerialActivity1OperationCompleted, userState);
        }
        
        private void OnaddCustomParallelAndSerialActivity1OperationCompleted(object arg) {
            if ((this.addCustomParallelAndSerialActivity1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCustomParallelAndSerialActivity1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("invokeProcessReturn")]
        public string invokeProcess(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pFormDefOID, string pFormFieldValue, string pSubject) {
            object[] results = this.Invoke("invokeProcess", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pFormDefOID,
                        pFormFieldValue,
                        pSubject});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeProcessAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pFormDefOID, string pFormFieldValue, string pSubject) {
            this.invokeProcessAsync(pProcessPackageId, pRequesterId, pOrgUnitId, pFormDefOID, pFormFieldValue, pSubject, null);
        }
        
        /// <remarks/>
        public void invokeProcessAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pFormDefOID, string pFormFieldValue, string pSubject, object userState) {
            if ((this.invokeProcessOperationCompleted == null)) {
                this.invokeProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeProcessOperationCompleted);
            }
            this.InvokeAsync("invokeProcess", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pFormDefOID,
                        pFormFieldValue,
                        pSubject}, this.invokeProcessOperationCompleted, userState);
        }
        
        private void OninvokeProcessOperationCompleted(object arg) {
            if ((this.invokeProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeProcessCompleted(this, new invokeProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="invokeProcess1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("invokeProcessReturn")]
        public string invokeProcess(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pSubject) {
            object[] results = this.Invoke("invokeProcess1", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pSubject});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeProcess1Async(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pSubject) {
            this.invokeProcess1Async(pProcessPackageId, pRequesterId, pOrgUnitId, pSubject, null);
        }
        
        /// <remarks/>
        public void invokeProcess1Async(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pSubject, object userState) {
            if ((this.invokeProcess1OperationCompleted == null)) {
                this.invokeProcess1OperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeProcess1OperationCompleted);
            }
            this.InvokeAsync("invokeProcess1", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pSubject}, this.invokeProcess1OperationCompleted, userState);
        }
        
        private void OninvokeProcess1OperationCompleted(object arg) {
            if ((this.invokeProcess1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeProcess1Completed(this, new invokeProcess1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void completeWorkItem(string pWorkItemOID, string pUserId, string pComment) {
            this.Invoke("completeWorkItem", new object[] {
                        pWorkItemOID,
                        pUserId,
                        pComment});
        }
        
        /// <remarks/>
        public void completeWorkItemAsync(string pWorkItemOID, string pUserId, string pComment) {
            this.completeWorkItemAsync(pWorkItemOID, pUserId, pComment, null);
        }
        
        /// <remarks/>
        public void completeWorkItemAsync(string pWorkItemOID, string pUserId, string pComment, object userState) {
            if ((this.completeWorkItemOperationCompleted == null)) {
                this.completeWorkItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OncompleteWorkItemOperationCompleted);
            }
            this.InvokeAsync("completeWorkItem", new object[] {
                        pWorkItemOID,
                        pUserId,
                        pComment}, this.completeWorkItemOperationCompleted, userState);
        }
        
        private void OncompleteWorkItemOperationCompleted(object arg) {
            if ((this.completeWorkItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.completeWorkItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void removeAbsenceRecord(string pUserId, string pStartDateTime, string pEndDateTime) {
            this.Invoke("removeAbsenceRecord", new object[] {
                        pUserId,
                        pStartDateTime,
                        pEndDateTime});
        }
        
        /// <remarks/>
        public void removeAbsenceRecordAsync(string pUserId, string pStartDateTime, string pEndDateTime) {
            this.removeAbsenceRecordAsync(pUserId, pStartDateTime, pEndDateTime, null);
        }
        
        /// <remarks/>
        public void removeAbsenceRecordAsync(string pUserId, string pStartDateTime, string pEndDateTime, object userState) {
            if ((this.removeAbsenceRecordOperationCompleted == null)) {
                this.removeAbsenceRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAbsenceRecordOperationCompleted);
            }
            this.InvokeAsync("removeAbsenceRecord", new object[] {
                        pUserId,
                        pStartDateTime,
                        pEndDateTime}, this.removeAbsenceRecordOperationCompleted, userState);
        }
        
        private void OnremoveAbsenceRecordOperationCompleted(object arg) {
            if ((this.removeAbsenceRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAbsenceRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchDueDateReturn")]
        public string fetchDueDate(string pUserId, string pBaseDate, string pDueDays, string pDateFormat) {
            object[] results = this.Invoke("fetchDueDate", new object[] {
                        pUserId,
                        pBaseDate,
                        pDueDays,
                        pDateFormat});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchDueDateAsync(string pUserId, string pBaseDate, string pDueDays, string pDateFormat) {
            this.fetchDueDateAsync(pUserId, pBaseDate, pDueDays, pDateFormat, null);
        }
        
        /// <remarks/>
        public void fetchDueDateAsync(string pUserId, string pBaseDate, string pDueDays, string pDateFormat, object userState) {
            if ((this.fetchDueDateOperationCompleted == null)) {
                this.fetchDueDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchDueDateOperationCompleted);
            }
            this.InvokeAsync("fetchDueDate", new object[] {
                        pUserId,
                        pBaseDate,
                        pDueDays,
                        pDateFormat}, this.fetchDueDateOperationCompleted, userState);
        }
        
        private void OnfetchDueDateOperationCompleted(object arg) {
            if ((this.fetchDueDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchDueDateCompleted(this, new fetchDueDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void reexecuteActivity(string pProcessSerialNo, string pAskReexecuteUserId, string pReexecuteActivityId, string pReexecuteComment) {
            this.Invoke("reexecuteActivity", new object[] {
                        pProcessSerialNo,
                        pAskReexecuteUserId,
                        pReexecuteActivityId,
                        pReexecuteComment});
        }
        
        /// <remarks/>
        public void reexecuteActivityAsync(string pProcessSerialNo, string pAskReexecuteUserId, string pReexecuteActivityId, string pReexecuteComment) {
            this.reexecuteActivityAsync(pProcessSerialNo, pAskReexecuteUserId, pReexecuteActivityId, pReexecuteComment, null);
        }
        
        /// <remarks/>
        public void reexecuteActivityAsync(string pProcessSerialNo, string pAskReexecuteUserId, string pReexecuteActivityId, string pReexecuteComment, object userState) {
            if ((this.reexecuteActivityOperationCompleted == null)) {
                this.reexecuteActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreexecuteActivityOperationCompleted);
            }
            this.InvokeAsync("reexecuteActivity", new object[] {
                        pProcessSerialNo,
                        pAskReexecuteUserId,
                        pReexecuteActivityId,
                        pReexecuteComment}, this.reexecuteActivityOperationCompleted, userState);
        }
        
        private void OnreexecuteActivityOperationCompleted(object arg) {
            if ((this.reexecuteActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reexecuteActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProcessPackageReturn")]
        public string getProcessPackage(string pProcessPackageId) {
            object[] results = this.Invoke("getProcessPackage", new object[] {
                        pProcessPackageId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getProcessPackageAsync(string pProcessPackageId) {
            this.getProcessPackageAsync(pProcessPackageId, null);
        }
        
        /// <remarks/>
        public void getProcessPackageAsync(string pProcessPackageId, object userState) {
            if ((this.getProcessPackageOperationCompleted == null)) {
                this.getProcessPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProcessPackageOperationCompleted);
            }
            this.InvokeAsync("getProcessPackage", new object[] {
                        pProcessPackageId}, this.getProcessPackageOperationCompleted, userState);
        }
        
        private void OngetProcessPackageOperationCompleted(object arg) {
            if ((this.getProcessPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProcessPackageCompleted(this, new getProcessPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchOrgUnitOfUserIdReturn")]
        public string fetchOrgUnitOfUserId(string pUserId) {
            object[] results = this.Invoke("fetchOrgUnitOfUserId", new object[] {
                        pUserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchOrgUnitOfUserIdAsync(string pUserId) {
            this.fetchOrgUnitOfUserIdAsync(pUserId, null);
        }
        
        /// <remarks/>
        public void fetchOrgUnitOfUserIdAsync(string pUserId, object userState) {
            if ((this.fetchOrgUnitOfUserIdOperationCompleted == null)) {
                this.fetchOrgUnitOfUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchOrgUnitOfUserIdOperationCompleted);
            }
            this.InvokeAsync("fetchOrgUnitOfUserId", new object[] {
                        pUserId}, this.fetchOrgUnitOfUserIdOperationCompleted, userState);
        }
        
        private void OnfetchOrgUnitOfUserIdOperationCompleted(object arg) {
            if ((this.fetchOrgUnitOfUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchOrgUnitOfUserIdCompleted(this, new fetchOrgUnitOfUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("getProjectsWithOrganizationIdReturn")]
        public string getProjectsWithOrganizationId(string pOrganizationId) {
            object[] results = this.Invoke("getProjectsWithOrganizationId", new object[] {
                        pOrganizationId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getProjectsWithOrganizationIdAsync(string pOrganizationId) {
            this.getProjectsWithOrganizationIdAsync(pOrganizationId, null);
        }
        
        /// <remarks/>
        public void getProjectsWithOrganizationIdAsync(string pOrganizationId, object userState) {
            if ((this.getProjectsWithOrganizationIdOperationCompleted == null)) {
                this.getProjectsWithOrganizationIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectsWithOrganizationIdOperationCompleted);
            }
            this.InvokeAsync("getProjectsWithOrganizationId", new object[] {
                        pOrganizationId}, this.getProjectsWithOrganizationIdOperationCompleted, userState);
        }
        
        private void OngetProjectsWithOrganizationIdOperationCompleted(object arg) {
            if ((this.getProjectsWithOrganizationIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectsWithOrganizationIdCompleted(this, new getProjectsWithOrganizationIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("countWorkingDaysReturn")]
        public int countWorkingDays(string pUserId, string pStartDateTime, string pEndDateTime, string pDateFormat) {
            object[] results = this.Invoke("countWorkingDays", new object[] {
                        pUserId,
                        pStartDateTime,
                        pEndDateTime,
                        pDateFormat});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void countWorkingDaysAsync(string pUserId, string pStartDateTime, string pEndDateTime, string pDateFormat) {
            this.countWorkingDaysAsync(pUserId, pStartDateTime, pEndDateTime, pDateFormat, null);
        }
        
        /// <remarks/>
        public void countWorkingDaysAsync(string pUserId, string pStartDateTime, string pEndDateTime, string pDateFormat, object userState) {
            if ((this.countWorkingDaysOperationCompleted == null)) {
                this.countWorkingDaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OncountWorkingDaysOperationCompleted);
            }
            this.InvokeAsync("countWorkingDays", new object[] {
                        pUserId,
                        pStartDateTime,
                        pEndDateTime,
                        pDateFormat}, this.countWorkingDaysOperationCompleted, userState);
        }
        
        private void OncountWorkingDaysOperationCompleted(object arg) {
            if ((this.countWorkingDaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.countWorkingDaysCompleted(this, new countWorkingDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void updateDefaultSubstitute(string pUserId, string pDefaultSubstitutesId) {
            this.Invoke("updateDefaultSubstitute", new object[] {
                        pUserId,
                        pDefaultSubstitutesId});
        }
        
        /// <remarks/>
        public void updateDefaultSubstituteAsync(string pUserId, string pDefaultSubstitutesId) {
            this.updateDefaultSubstituteAsync(pUserId, pDefaultSubstitutesId, null);
        }
        
        /// <remarks/>
        public void updateDefaultSubstituteAsync(string pUserId, string pDefaultSubstitutesId, object userState) {
            if ((this.updateDefaultSubstituteOperationCompleted == null)) {
                this.updateDefaultSubstituteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateDefaultSubstituteOperationCompleted);
            }
            this.InvokeAsync("updateDefaultSubstitute", new object[] {
                        pUserId,
                        pDefaultSubstitutesId}, this.updateDefaultSubstituteOperationCompleted, userState);
        }
        
        private void OnupdateDefaultSubstituteOperationCompleted(object arg) {
            if ((this.updateDefaultSubstituteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateDefaultSubstituteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSubstituteStateReturn")]
        public string getSubstituteState(string pUserId, string pCheckTime) {
            object[] results = this.Invoke("getSubstituteState", new object[] {
                        pUserId,
                        pCheckTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSubstituteStateAsync(string pUserId, string pCheckTime) {
            this.getSubstituteStateAsync(pUserId, pCheckTime, null);
        }
        
        /// <remarks/>
        public void getSubstituteStateAsync(string pUserId, string pCheckTime, object userState) {
            if ((this.getSubstituteStateOperationCompleted == null)) {
                this.getSubstituteStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSubstituteStateOperationCompleted);
            }
            this.InvokeAsync("getSubstituteState", new object[] {
                        pUserId,
                        pCheckTime}, this.getSubstituteStateOperationCompleted, userState);
        }
        
        private void OngetSubstituteStateOperationCompleted(object arg) {
            if ((this.getSubstituteStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSubstituteStateCompleted(this, new getSubstituteStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchDefaultSubstituteInfoReturn")]
        public string fetchDefaultSubstituteInfo(string pUserId, int pStartSeq, int pEndSeq, string pDate) {
            object[] results = this.Invoke("fetchDefaultSubstituteInfo", new object[] {
                        pUserId,
                        pStartSeq,
                        pEndSeq,
                        pDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchDefaultSubstituteInfoAsync(string pUserId, int pStartSeq, int pEndSeq, string pDate) {
            this.fetchDefaultSubstituteInfoAsync(pUserId, pStartSeq, pEndSeq, pDate, null);
        }
        
        /// <remarks/>
        public void fetchDefaultSubstituteInfoAsync(string pUserId, int pStartSeq, int pEndSeq, string pDate, object userState) {
            if ((this.fetchDefaultSubstituteInfoOperationCompleted == null)) {
                this.fetchDefaultSubstituteInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchDefaultSubstituteInfoOperationCompleted);
            }
            this.InvokeAsync("fetchDefaultSubstituteInfo", new object[] {
                        pUserId,
                        pStartSeq,
                        pEndSeq,
                        pDate}, this.fetchDefaultSubstituteInfoOperationCompleted, userState);
        }
        
        private void OnfetchDefaultSubstituteInfoOperationCompleted(object arg) {
            if ((this.fetchDefaultSubstituteInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchDefaultSubstituteInfoCompleted(this, new fetchDefaultSubstituteInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="fetchDefaultSubstituteInfo1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchDefaultSubstituteInfoReturn")]
        public string fetchDefaultSubstituteInfo(string pUserId, int pStartSeq, int pEndSeq) {
            object[] results = this.Invoke("fetchDefaultSubstituteInfo1", new object[] {
                        pUserId,
                        pStartSeq,
                        pEndSeq});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchDefaultSubstituteInfo1Async(string pUserId, int pStartSeq, int pEndSeq) {
            this.fetchDefaultSubstituteInfo1Async(pUserId, pStartSeq, pEndSeq, null);
        }
        
        /// <remarks/>
        public void fetchDefaultSubstituteInfo1Async(string pUserId, int pStartSeq, int pEndSeq, object userState) {
            if ((this.fetchDefaultSubstituteInfo1OperationCompleted == null)) {
                this.fetchDefaultSubstituteInfo1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchDefaultSubstituteInfo1OperationCompleted);
            }
            this.InvokeAsync("fetchDefaultSubstituteInfo1", new object[] {
                        pUserId,
                        pStartSeq,
                        pEndSeq}, this.fetchDefaultSubstituteInfo1OperationCompleted, userState);
        }
        
        private void OnfetchDefaultSubstituteInfo1OperationCompleted(object arg) {
            if ((this.fetchDefaultSubstituteInfo1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchDefaultSubstituteInfo1Completed(this, new fetchDefaultSubstituteInfo1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("findFormOIDsOfProcessReturn")]
        public string findFormOIDsOfProcess(string pProcessPackageId) {
            object[] results = this.Invoke("findFormOIDsOfProcess", new object[] {
                        pProcessPackageId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void findFormOIDsOfProcessAsync(string pProcessPackageId) {
            this.findFormOIDsOfProcessAsync(pProcessPackageId, null);
        }
        
        /// <remarks/>
        public void findFormOIDsOfProcessAsync(string pProcessPackageId, object userState) {
            if ((this.findFormOIDsOfProcessOperationCompleted == null)) {
                this.findFormOIDsOfProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindFormOIDsOfProcessOperationCompleted);
            }
            this.InvokeAsync("findFormOIDsOfProcess", new object[] {
                        pProcessPackageId}, this.findFormOIDsOfProcessOperationCompleted, userState);
        }
        
        private void OnfindFormOIDsOfProcessOperationCompleted(object arg) {
            if ((this.findFormOIDsOfProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findFormOIDsOfProcessCompleted(this, new findFormOIDsOfProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("reserveNoCmDocumentReturn")]
        public string reserveNoCmDocument(string pOriginalFullFileName) {
            object[] results = this.Invoke("reserveNoCmDocument", new object[] {
                        pOriginalFullFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void reserveNoCmDocumentAsync(string pOriginalFullFileName) {
            this.reserveNoCmDocumentAsync(pOriginalFullFileName, null);
        }
        
        /// <remarks/>
        public void reserveNoCmDocumentAsync(string pOriginalFullFileName, object userState) {
            if ((this.reserveNoCmDocumentOperationCompleted == null)) {
                this.reserveNoCmDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreserveNoCmDocumentOperationCompleted);
            }
            this.InvokeAsync("reserveNoCmDocument", new object[] {
                        pOriginalFullFileName}, this.reserveNoCmDocumentOperationCompleted, userState);
        }
        
        private void OnreserveNoCmDocumentOperationCompleted(object arg) {
            if ((this.reserveNoCmDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reserveNoCmDocumentCompleted(this, new reserveNoCmDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void bypassActivity(string pActivityInstanceOID) {
            this.Invoke("bypassActivity", new object[] {
                        pActivityInstanceOID});
        }
        
        /// <remarks/>
        public void bypassActivityAsync(string pActivityInstanceOID) {
            this.bypassActivityAsync(pActivityInstanceOID, null);
        }
        
        /// <remarks/>
        public void bypassActivityAsync(string pActivityInstanceOID, object userState) {
            if ((this.bypassActivityOperationCompleted == null)) {
                this.bypassActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbypassActivityOperationCompleted);
            }
            this.InvokeAsync("bypassActivity", new object[] {
                        pActivityInstanceOID}, this.bypassActivityOperationCompleted, userState);
        }
        
        private void OnbypassActivityOperationCompleted(object arg) {
            if ((this.bypassActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.bypassActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void abortProcessForSerialNo(string pProcessInstanceSerialNo, string pAbortComment) {
            this.Invoke("abortProcessForSerialNo", new object[] {
                        pProcessInstanceSerialNo,
                        pAbortComment});
        }
        
        /// <remarks/>
        public void abortProcessForSerialNoAsync(string pProcessInstanceSerialNo, string pAbortComment) {
            this.abortProcessForSerialNoAsync(pProcessInstanceSerialNo, pAbortComment, null);
        }
        
        /// <remarks/>
        public void abortProcessForSerialNoAsync(string pProcessInstanceSerialNo, string pAbortComment, object userState) {
            if ((this.abortProcessForSerialNoOperationCompleted == null)) {
                this.abortProcessForSerialNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnabortProcessForSerialNoOperationCompleted);
            }
            this.InvokeAsync("abortProcessForSerialNo", new object[] {
                        pProcessInstanceSerialNo,
                        pAbortComment}, this.abortProcessForSerialNoOperationCompleted, userState);
        }
        
        private void OnabortProcessForSerialNoOperationCompleted(object arg) {
            if ((this.abortProcessForSerialNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.abortProcessForSerialNoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void acceptWorkItem(string pWorkItemOID, string pUserId) {
            this.Invoke("acceptWorkItem", new object[] {
                        pWorkItemOID,
                        pUserId});
        }
        
        /// <remarks/>
        public void acceptWorkItemAsync(string pWorkItemOID, string pUserId) {
            this.acceptWorkItemAsync(pWorkItemOID, pUserId, null);
        }
        
        /// <remarks/>
        public void acceptWorkItemAsync(string pWorkItemOID, string pUserId, object userState) {
            if ((this.acceptWorkItemOperationCompleted == null)) {
                this.acceptWorkItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnacceptWorkItemOperationCompleted);
            }
            this.InvokeAsync("acceptWorkItem", new object[] {
                        pWorkItemOID,
                        pUserId}, this.acceptWorkItemOperationCompleted, userState);
        }
        
        private void OnacceptWorkItemOperationCompleted(object arg) {
            if ((this.acceptWorkItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.acceptWorkItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void terminatedProcessForSerialNo(string pProcessInstanceSerialNo, string pUserId, string pTerminatedComment) {
            this.Invoke("terminatedProcessForSerialNo", new object[] {
                        pProcessInstanceSerialNo,
                        pUserId,
                        pTerminatedComment});
        }
        
        /// <remarks/>
        public void terminatedProcessForSerialNoAsync(string pProcessInstanceSerialNo, string pUserId, string pTerminatedComment) {
            this.terminatedProcessForSerialNoAsync(pProcessInstanceSerialNo, pUserId, pTerminatedComment, null);
        }
        
        /// <remarks/>
        public void terminatedProcessForSerialNoAsync(string pProcessInstanceSerialNo, string pUserId, string pTerminatedComment, object userState) {
            if ((this.terminatedProcessForSerialNoOperationCompleted == null)) {
                this.terminatedProcessForSerialNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnterminatedProcessForSerialNoOperationCompleted);
            }
            this.InvokeAsync("terminatedProcessForSerialNo", new object[] {
                        pProcessInstanceSerialNo,
                        pUserId,
                        pTerminatedComment}, this.terminatedProcessForSerialNoOperationCompleted, userState);
        }
        
        private void OnterminatedProcessForSerialNoOperationCompleted(object arg) {
            if ((this.terminatedProcessForSerialNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.terminatedProcessForSerialNoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void managementReassignWorkItem(string pAcceptorOID, string pWorkItemOID, string pReassignComment) {
            this.Invoke("managementReassignWorkItem", new object[] {
                        pAcceptorOID,
                        pWorkItemOID,
                        pReassignComment});
        }
        
        /// <remarks/>
        public void managementReassignWorkItemAsync(string pAcceptorOID, string pWorkItemOID, string pReassignComment) {
            this.managementReassignWorkItemAsync(pAcceptorOID, pWorkItemOID, pReassignComment, null);
        }
        
        /// <remarks/>
        public void managementReassignWorkItemAsync(string pAcceptorOID, string pWorkItemOID, string pReassignComment, object userState) {
            if ((this.managementReassignWorkItemOperationCompleted == null)) {
                this.managementReassignWorkItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmanagementReassignWorkItemOperationCompleted);
            }
            this.InvokeAsync("managementReassignWorkItem", new object[] {
                        pAcceptorOID,
                        pWorkItemOID,
                        pReassignComment}, this.managementReassignWorkItemOperationCompleted, userState);
        }
        
        private void OnmanagementReassignWorkItemOperationCompleted(object arg) {
            if ((this.managementReassignWorkItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.managementReassignWorkItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void assignRelevantDataBySerialNo(string pProcessInstanceSerialNo, string pRelevantDataId, string pRelevantDataValue) {
            this.Invoke("assignRelevantDataBySerialNo", new object[] {
                        pProcessInstanceSerialNo,
                        pRelevantDataId,
                        pRelevantDataValue});
        }
        
        /// <remarks/>
        public void assignRelevantDataBySerialNoAsync(string pProcessInstanceSerialNo, string pRelevantDataId, string pRelevantDataValue) {
            this.assignRelevantDataBySerialNoAsync(pProcessInstanceSerialNo, pRelevantDataId, pRelevantDataValue, null);
        }
        
        /// <remarks/>
        public void assignRelevantDataBySerialNoAsync(string pProcessInstanceSerialNo, string pRelevantDataId, string pRelevantDataValue, object userState) {
            if ((this.assignRelevantDataBySerialNoOperationCompleted == null)) {
                this.assignRelevantDataBySerialNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnassignRelevantDataBySerialNoOperationCompleted);
            }
            this.InvokeAsync("assignRelevantDataBySerialNo", new object[] {
                        pProcessInstanceSerialNo,
                        pRelevantDataId,
                        pRelevantDataValue}, this.assignRelevantDataBySerialNoOperationCompleted, userState);
        }
        
        private void OnassignRelevantDataBySerialNoOperationCompleted(object arg) {
            if ((this.assignRelevantDataBySerialNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.assignRelevantDataBySerialNoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void managementChangeWorkItemOwner(string pAcceptorOID, string pWorkItemOID, string pReassignComment) {
            this.Invoke("managementChangeWorkItemOwner", new object[] {
                        pAcceptorOID,
                        pWorkItemOID,
                        pReassignComment});
        }
        
        /// <remarks/>
        public void managementChangeWorkItemOwnerAsync(string pAcceptorOID, string pWorkItemOID, string pReassignComment) {
            this.managementChangeWorkItemOwnerAsync(pAcceptorOID, pWorkItemOID, pReassignComment, null);
        }
        
        /// <remarks/>
        public void managementChangeWorkItemOwnerAsync(string pAcceptorOID, string pWorkItemOID, string pReassignComment, object userState) {
            if ((this.managementChangeWorkItemOwnerOperationCompleted == null)) {
                this.managementChangeWorkItemOwnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmanagementChangeWorkItemOwnerOperationCompleted);
            }
            this.InvokeAsync("managementChangeWorkItemOwner", new object[] {
                        pAcceptorOID,
                        pWorkItemOID,
                        pReassignComment}, this.managementChangeWorkItemOwnerOperationCompleted, userState);
        }
        
        private void OnmanagementChangeWorkItemOwnerOperationCompleted(object arg) {
            if ((this.managementChangeWorkItemOwnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.managementChangeWorkItemOwnerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("addCloneSerialActivityReturn")]
        public string addCloneSerialActivity(string pProcessInstanceSN, string pActId, string pRefActId) {
            object[] results = this.Invoke("addCloneSerialActivity", new object[] {
                        pProcessInstanceSN,
                        pActId,
                        pRefActId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addCloneSerialActivityAsync(string pProcessInstanceSN, string pActId, string pRefActId) {
            this.addCloneSerialActivityAsync(pProcessInstanceSN, pActId, pRefActId, null);
        }
        
        /// <remarks/>
        public void addCloneSerialActivityAsync(string pProcessInstanceSN, string pActId, string pRefActId, object userState) {
            if ((this.addCloneSerialActivityOperationCompleted == null)) {
                this.addCloneSerialActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCloneSerialActivityOperationCompleted);
            }
            this.InvokeAsync("addCloneSerialActivity", new object[] {
                        pProcessInstanceSN,
                        pActId,
                        pRefActId}, this.addCloneSerialActivityOperationCompleted, userState);
        }
        
        private void OnaddCloneSerialActivityOperationCompleted(object arg) {
            if ((this.addCloneSerialActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCloneSerialActivityCompleted(this, new addCloneSerialActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("isPerformerOfProcessInstanceReturn")]
        public string isPerformerOfProcessInstance(string pUserId, string pProcessInstanceSerialNo) {
            object[] results = this.Invoke("isPerformerOfProcessInstance", new object[] {
                        pUserId,
                        pProcessInstanceSerialNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void isPerformerOfProcessInstanceAsync(string pUserId, string pProcessInstanceSerialNo) {
            this.isPerformerOfProcessInstanceAsync(pUserId, pProcessInstanceSerialNo, null);
        }
        
        /// <remarks/>
        public void isPerformerOfProcessInstanceAsync(string pUserId, string pProcessInstanceSerialNo, object userState) {
            if ((this.isPerformerOfProcessInstanceOperationCompleted == null)) {
                this.isPerformerOfProcessInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisPerformerOfProcessInstanceOperationCompleted);
            }
            this.InvokeAsync("isPerformerOfProcessInstance", new object[] {
                        pUserId,
                        pProcessInstanceSerialNo}, this.isPerformerOfProcessInstanceOperationCompleted, userState);
        }
        
        private void OnisPerformerOfProcessInstanceOperationCompleted(object arg) {
            if ((this.isPerformerOfProcessInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isPerformerOfProcessInstanceCompleted(this, new isPerformerOfProcessInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchFullProcInstanceWithOIDReturn")]
        public string fetchFullProcInstanceWithOID(string pProcessInstanceOID) {
            object[] results = this.Invoke("fetchFullProcInstanceWithOID", new object[] {
                        pProcessInstanceOID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchFullProcInstanceWithOIDAsync(string pProcessInstanceOID) {
            this.fetchFullProcInstanceWithOIDAsync(pProcessInstanceOID, null);
        }
        
        /// <remarks/>
        public void fetchFullProcInstanceWithOIDAsync(string pProcessInstanceOID, object userState) {
            if ((this.fetchFullProcInstanceWithOIDOperationCompleted == null)) {
                this.fetchFullProcInstanceWithOIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchFullProcInstanceWithOIDOperationCompleted);
            }
            this.InvokeAsync("fetchFullProcInstanceWithOID", new object[] {
                        pProcessInstanceOID}, this.fetchFullProcInstanceWithOIDOperationCompleted, userState);
        }
        
        private void OnfetchFullProcInstanceWithOIDOperationCompleted(object arg) {
            if ((this.fetchFullProcInstanceWithOIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchFullProcInstanceWithOIDCompleted(this, new fetchFullProcInstanceWithOIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchFullProcInstanceWithSerialNoReturn")]
        public string fetchFullProcInstanceWithSerialNo(string pProcessInstanceSerialNo) {
            object[] results = this.Invoke("fetchFullProcInstanceWithSerialNo", new object[] {
                        pProcessInstanceSerialNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchFullProcInstanceWithSerialNoAsync(string pProcessInstanceSerialNo) {
            this.fetchFullProcInstanceWithSerialNoAsync(pProcessInstanceSerialNo, null);
        }
        
        /// <remarks/>
        public void fetchFullProcInstanceWithSerialNoAsync(string pProcessInstanceSerialNo, object userState) {
            if ((this.fetchFullProcInstanceWithSerialNoOperationCompleted == null)) {
                this.fetchFullProcInstanceWithSerialNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchFullProcInstanceWithSerialNoOperationCompleted);
            }
            this.InvokeAsync("fetchFullProcInstanceWithSerialNo", new object[] {
                        pProcessInstanceSerialNo}, this.fetchFullProcInstanceWithSerialNoOperationCompleted, userState);
        }
        
        private void OnfetchFullProcInstanceWithSerialNoOperationCompleted(object arg) {
            if ((this.fetchFullProcInstanceWithSerialNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchFullProcInstanceWithSerialNoCompleted(this, new fetchFullProcInstanceWithSerialNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchProcInstanceWithOIDReturn")]
        public string fetchProcInstanceWithOID(string pProcessInstanceOID) {
            object[] results = this.Invoke("fetchProcInstanceWithOID", new object[] {
                        pProcessInstanceOID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchProcInstanceWithOIDAsync(string pProcessInstanceOID) {
            this.fetchProcInstanceWithOIDAsync(pProcessInstanceOID, null);
        }
        
        /// <remarks/>
        public void fetchProcInstanceWithOIDAsync(string pProcessInstanceOID, object userState) {
            if ((this.fetchProcInstanceWithOIDOperationCompleted == null)) {
                this.fetchProcInstanceWithOIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchProcInstanceWithOIDOperationCompleted);
            }
            this.InvokeAsync("fetchProcInstanceWithOID", new object[] {
                        pProcessInstanceOID}, this.fetchProcInstanceWithOIDOperationCompleted, userState);
        }
        
        private void OnfetchProcInstanceWithOIDOperationCompleted(object arg) {
            if ((this.fetchProcInstanceWithOIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchProcInstanceWithOIDCompleted(this, new fetchProcInstanceWithOIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchProcInstancesReturn")]
        public string fetchProcInstances(string pProcessId, string pProcessInitialStartTime, string pProcessInitialEndTime, string pProcInstanceState) {
            object[] results = this.Invoke("fetchProcInstances", new object[] {
                        pProcessId,
                        pProcessInitialStartTime,
                        pProcessInitialEndTime,
                        pProcInstanceState});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchProcInstancesAsync(string pProcessId, string pProcessInitialStartTime, string pProcessInitialEndTime, string pProcInstanceState) {
            this.fetchProcInstancesAsync(pProcessId, pProcessInitialStartTime, pProcessInitialEndTime, pProcInstanceState, null);
        }
        
        /// <remarks/>
        public void fetchProcInstancesAsync(string pProcessId, string pProcessInitialStartTime, string pProcessInitialEndTime, string pProcInstanceState, object userState) {
            if ((this.fetchProcInstancesOperationCompleted == null)) {
                this.fetchProcInstancesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchProcInstancesOperationCompleted);
            }
            this.InvokeAsync("fetchProcInstances", new object[] {
                        pProcessId,
                        pProcessInitialStartTime,
                        pProcessInitialEndTime,
                        pProcInstanceState}, this.fetchProcInstancesOperationCompleted, userState);
        }
        
        private void OnfetchProcInstancesOperationCompleted(object arg) {
            if ((this.fetchProcInstancesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchProcInstancesCompleted(this, new fetchProcInstancesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchClosedProcInstancesReturn")]
        public string fetchClosedProcInstances(string pProcessId, string pProcessClosedStartTime, string pProcessClosedEndTime, string pProcInstanceClosedState) {
            object[] results = this.Invoke("fetchClosedProcInstances", new object[] {
                        pProcessId,
                        pProcessClosedStartTime,
                        pProcessClosedEndTime,
                        pProcInstanceClosedState});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchClosedProcInstancesAsync(string pProcessId, string pProcessClosedStartTime, string pProcessClosedEndTime, string pProcInstanceClosedState) {
            this.fetchClosedProcInstancesAsync(pProcessId, pProcessClosedStartTime, pProcessClosedEndTime, pProcInstanceClosedState, null);
        }
        
        /// <remarks/>
        public void fetchClosedProcInstancesAsync(string pProcessId, string pProcessClosedStartTime, string pProcessClosedEndTime, string pProcInstanceClosedState, object userState) {
            if ((this.fetchClosedProcInstancesOperationCompleted == null)) {
                this.fetchClosedProcInstancesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchClosedProcInstancesOperationCompleted);
            }
            this.InvokeAsync("fetchClosedProcInstances", new object[] {
                        pProcessId,
                        pProcessClosedStartTime,
                        pProcessClosedEndTime,
                        pProcInstanceClosedState}, this.fetchClosedProcInstancesOperationCompleted, userState);
        }
        
        private void OnfetchClosedProcInstancesOperationCompleted(object arg) {
            if ((this.fetchClosedProcInstancesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchClosedProcInstancesCompleted(this, new fetchClosedProcInstancesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchProcInstanceWithSerialNoReturn")]
        public string fetchProcInstanceWithSerialNo(string pProcessInstanceSerialNo) {
            object[] results = this.Invoke("fetchProcInstanceWithSerialNo", new object[] {
                        pProcessInstanceSerialNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchProcInstanceWithSerialNoAsync(string pProcessInstanceSerialNo) {
            this.fetchProcInstanceWithSerialNoAsync(pProcessInstanceSerialNo, null);
        }
        
        /// <remarks/>
        public void fetchProcInstanceWithSerialNoAsync(string pProcessInstanceSerialNo, object userState) {
            if ((this.fetchProcInstanceWithSerialNoOperationCompleted == null)) {
                this.fetchProcInstanceWithSerialNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchProcInstanceWithSerialNoOperationCompleted);
            }
            this.InvokeAsync("fetchProcInstanceWithSerialNo", new object[] {
                        pProcessInstanceSerialNo}, this.fetchProcInstanceWithSerialNoOperationCompleted, userState);
        }
        
        private void OnfetchProcInstanceWithSerialNoOperationCompleted(object arg) {
            if ((this.fetchProcInstanceWithSerialNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchProcInstanceWithSerialNoCompleted(this, new fetchProcInstanceWithSerialNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchFormInstanceWithProcOIDReturn")]
        public string fetchFormInstanceWithProcOID(string pProcessInstanceOID) {
            object[] results = this.Invoke("fetchFormInstanceWithProcOID", new object[] {
                        pProcessInstanceOID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchFormInstanceWithProcOIDAsync(string pProcessInstanceOID) {
            this.fetchFormInstanceWithProcOIDAsync(pProcessInstanceOID, null);
        }
        
        /// <remarks/>
        public void fetchFormInstanceWithProcOIDAsync(string pProcessInstanceOID, object userState) {
            if ((this.fetchFormInstanceWithProcOIDOperationCompleted == null)) {
                this.fetchFormInstanceWithProcOIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchFormInstanceWithProcOIDOperationCompleted);
            }
            this.InvokeAsync("fetchFormInstanceWithProcOID", new object[] {
                        pProcessInstanceOID}, this.fetchFormInstanceWithProcOIDOperationCompleted, userState);
        }
        
        private void OnfetchFormInstanceWithProcOIDOperationCompleted(object arg) {
            if ((this.fetchFormInstanceWithProcOIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchFormInstanceWithProcOIDCompleted(this, new fetchFormInstanceWithProcOIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchFormInstanceWithProcSerlNoReturn")]
        public string fetchFormInstanceWithProcSerlNo(string pProcessInstanceSerialNo) {
            object[] results = this.Invoke("fetchFormInstanceWithProcSerlNo", new object[] {
                        pProcessInstanceSerialNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchFormInstanceWithProcSerlNoAsync(string pProcessInstanceSerialNo) {
            this.fetchFormInstanceWithProcSerlNoAsync(pProcessInstanceSerialNo, null);
        }
        
        /// <remarks/>
        public void fetchFormInstanceWithProcSerlNoAsync(string pProcessInstanceSerialNo, object userState) {
            if ((this.fetchFormInstanceWithProcSerlNoOperationCompleted == null)) {
                this.fetchFormInstanceWithProcSerlNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchFormInstanceWithProcSerlNoOperationCompleted);
            }
            this.InvokeAsync("fetchFormInstanceWithProcSerlNo", new object[] {
                        pProcessInstanceSerialNo}, this.fetchFormInstanceWithProcSerlNoOperationCompleted, userState);
        }
        
        private void OnfetchFormInstanceWithProcSerlNoOperationCompleted(object arg) {
            if ((this.fetchFormInstanceWithProcSerlNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchFormInstanceWithProcSerlNoCompleted(this, new fetchFormInstanceWithProcSerlNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchUniFormatFormInstanceWithProcOIDReturn")]
        public string fetchUniFormatFormInstanceWithProcOID(string pProcessInstanceOID) {
            object[] results = this.Invoke("fetchUniFormatFormInstanceWithProcOID", new object[] {
                        pProcessInstanceOID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchUniFormatFormInstanceWithProcOIDAsync(string pProcessInstanceOID) {
            this.fetchUniFormatFormInstanceWithProcOIDAsync(pProcessInstanceOID, null);
        }
        
        /// <remarks/>
        public void fetchUniFormatFormInstanceWithProcOIDAsync(string pProcessInstanceOID, object userState) {
            if ((this.fetchUniFormatFormInstanceWithProcOIDOperationCompleted == null)) {
                this.fetchUniFormatFormInstanceWithProcOIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchUniFormatFormInstanceWithProcOIDOperationCompleted);
            }
            this.InvokeAsync("fetchUniFormatFormInstanceWithProcOID", new object[] {
                        pProcessInstanceOID}, this.fetchUniFormatFormInstanceWithProcOIDOperationCompleted, userState);
        }
        
        private void OnfetchUniFormatFormInstanceWithProcOIDOperationCompleted(object arg) {
            if ((this.fetchUniFormatFormInstanceWithProcOIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchUniFormatFormInstanceWithProcOIDCompleted(this, new fetchUniFormatFormInstanceWithProcOIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchUniFormatFormInstanceWithProcSerlNoReturn")]
        public string fetchUniFormatFormInstanceWithProcSerlNo(string pProcessInstanceSerialNo) {
            object[] results = this.Invoke("fetchUniFormatFormInstanceWithProcSerlNo", new object[] {
                        pProcessInstanceSerialNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchUniFormatFormInstanceWithProcSerlNoAsync(string pProcessInstanceSerialNo) {
            this.fetchUniFormatFormInstanceWithProcSerlNoAsync(pProcessInstanceSerialNo, null);
        }
        
        /// <remarks/>
        public void fetchUniFormatFormInstanceWithProcSerlNoAsync(string pProcessInstanceSerialNo, object userState) {
            if ((this.fetchUniFormatFormInstanceWithProcSerlNoOperationCompleted == null)) {
                this.fetchUniFormatFormInstanceWithProcSerlNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchUniFormatFormInstanceWithProcSerlNoOperationCompleted);
            }
            this.InvokeAsync("fetchUniFormatFormInstanceWithProcSerlNo", new object[] {
                        pProcessInstanceSerialNo}, this.fetchUniFormatFormInstanceWithProcSerlNoOperationCompleted, userState);
        }
        
        private void OnfetchUniFormatFormInstanceWithProcSerlNoOperationCompleted(object arg) {
            if ((this.fetchUniFormatFormInstanceWithProcSerlNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchUniFormatFormInstanceWithProcSerlNoCompleted(this, new fetchUniFormatFormInstanceWithProcSerlNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchProcSNMatchCurrtentPerformerReturn")]
        public string fetchProcSNMatchCurrtentPerformer(string pProcessId, string pActId, string pUserId) {
            object[] results = this.Invoke("fetchProcSNMatchCurrtentPerformer", new object[] {
                        pProcessId,
                        pActId,
                        pUserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchProcSNMatchCurrtentPerformerAsync(string pProcessId, string pActId, string pUserId) {
            this.fetchProcSNMatchCurrtentPerformerAsync(pProcessId, pActId, pUserId, null);
        }
        
        /// <remarks/>
        public void fetchProcSNMatchCurrtentPerformerAsync(string pProcessId, string pActId, string pUserId, object userState) {
            if ((this.fetchProcSNMatchCurrtentPerformerOperationCompleted == null)) {
                this.fetchProcSNMatchCurrtentPerformerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchProcSNMatchCurrtentPerformerOperationCompleted);
            }
            this.InvokeAsync("fetchProcSNMatchCurrtentPerformer", new object[] {
                        pProcessId,
                        pActId,
                        pUserId}, this.fetchProcSNMatchCurrtentPerformerOperationCompleted, userState);
        }
        
        private void OnfetchProcSNMatchCurrtentPerformerOperationCompleted(object arg) {
            if ((this.fetchProcSNMatchCurrtentPerformerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchProcSNMatchCurrtentPerformerCompleted(this, new fetchProcSNMatchCurrtentPerformerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchCanTraceProcSNReturn")]
        public string fetchCanTraceProcSN(string pProcessIds, string pUserId) {
            object[] results = this.Invoke("fetchCanTraceProcSN", new object[] {
                        pProcessIds,
                        pUserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchCanTraceProcSNAsync(string pProcessIds, string pUserId) {
            this.fetchCanTraceProcSNAsync(pProcessIds, pUserId, null);
        }
        
        /// <remarks/>
        public void fetchCanTraceProcSNAsync(string pProcessIds, string pUserId, object userState) {
            if ((this.fetchCanTraceProcSNOperationCompleted == null)) {
                this.fetchCanTraceProcSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchCanTraceProcSNOperationCompleted);
            }
            this.InvokeAsync("fetchCanTraceProcSN", new object[] {
                        pProcessIds,
                        pUserId}, this.fetchCanTraceProcSNOperationCompleted, userState);
        }
        
        private void OnfetchCanTraceProcSNOperationCompleted(object arg) {
            if ((this.fetchCanTraceProcSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchCanTraceProcSNCompleted(this, new fetchCanTraceProcSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchToDoWorkItemReturn")]
        public string fetchToDoWorkItem(string pProcessIds, string pUserId) {
            object[] results = this.Invoke("fetchToDoWorkItem", new object[] {
                        pProcessIds,
                        pUserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchToDoWorkItemAsync(string pProcessIds, string pUserId) {
            this.fetchToDoWorkItemAsync(pProcessIds, pUserId, null);
        }
        
        /// <remarks/>
        public void fetchToDoWorkItemAsync(string pProcessIds, string pUserId, object userState) {
            if ((this.fetchToDoWorkItemOperationCompleted == null)) {
                this.fetchToDoWorkItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchToDoWorkItemOperationCompleted);
            }
            this.InvokeAsync("fetchToDoWorkItem", new object[] {
                        pProcessIds,
                        pUserId}, this.fetchToDoWorkItemOperationCompleted, userState);
        }
        
        private void OnfetchToDoWorkItemOperationCompleted(object arg) {
            if ((this.fetchToDoWorkItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchToDoWorkItemCompleted(this, new fetchToDoWorkItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void increaseViewTimesOfWorkAssignment(string pUserId, string pWorkItemOID) {
            this.Invoke("increaseViewTimesOfWorkAssignment", new object[] {
                        pUserId,
                        pWorkItemOID});
        }
        
        /// <remarks/>
        public void increaseViewTimesOfWorkAssignmentAsync(string pUserId, string pWorkItemOID) {
            this.increaseViewTimesOfWorkAssignmentAsync(pUserId, pWorkItemOID, null);
        }
        
        /// <remarks/>
        public void increaseViewTimesOfWorkAssignmentAsync(string pUserId, string pWorkItemOID, object userState) {
            if ((this.increaseViewTimesOfWorkAssignmentOperationCompleted == null)) {
                this.increaseViewTimesOfWorkAssignmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnincreaseViewTimesOfWorkAssignmentOperationCompleted);
            }
            this.InvokeAsync("increaseViewTimesOfWorkAssignment", new object[] {
                        pUserId,
                        pWorkItemOID}, this.increaseViewTimesOfWorkAssignmentOperationCompleted, userState);
        }
        
        private void OnincreaseViewTimesOfWorkAssignmentOperationCompleted(object arg) {
            if ((this.increaseViewTimesOfWorkAssignmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.increaseViewTimesOfWorkAssignmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("invokeProcessByOrgReturn")]
        public string invokeProcessByOrg(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pSubject) {
            object[] results = this.Invoke("invokeProcessByOrg", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pOrgId,
                        pSubject});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeProcessByOrgAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pSubject) {
            this.invokeProcessByOrgAsync(pProcessPackageId, pRequesterId, pOrgUnitId, pOrgId, pSubject, null);
        }
        
        /// <remarks/>
        public void invokeProcessByOrgAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pSubject, object userState) {
            if ((this.invokeProcessByOrgOperationCompleted == null)) {
                this.invokeProcessByOrgOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeProcessByOrgOperationCompleted);
            }
            this.InvokeAsync("invokeProcessByOrg", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pOrgId,
                        pSubject}, this.invokeProcessByOrgOperationCompleted, userState);
        }
        
        private void OninvokeProcessByOrgOperationCompleted(object arg) {
            if ((this.invokeProcessByOrgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeProcessByOrgCompleted(this, new invokeProcessByOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="invokeProcessByOrg1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("invokeProcessByOrgReturn")]
        public string invokeProcessByOrg(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pFormDefOID, string pFormFieldValue, string pSubject) {
            object[] results = this.Invoke("invokeProcessByOrg1", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pOrgId,
                        pFormDefOID,
                        pFormFieldValue,
                        pSubject});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeProcessByOrg1Async(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pFormDefOID, string pFormFieldValue, string pSubject) {
            this.invokeProcessByOrg1Async(pProcessPackageId, pRequesterId, pOrgUnitId, pOrgId, pFormDefOID, pFormFieldValue, pSubject, null);
        }
        
        /// <remarks/>
        public void invokeProcessByOrg1Async(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pFormDefOID, string pFormFieldValue, string pSubject, object userState) {
            if ((this.invokeProcessByOrg1OperationCompleted == null)) {
                this.invokeProcessByOrg1OperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeProcessByOrg1OperationCompleted);
            }
            this.InvokeAsync("invokeProcessByOrg1", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pOrgId,
                        pFormDefOID,
                        pFormFieldValue,
                        pSubject}, this.invokeProcessByOrg1OperationCompleted, userState);
        }
        
        private void OninvokeProcessByOrg1OperationCompleted(object arg) {
            if ((this.invokeProcessByOrg1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeProcessByOrg1Completed(this, new invokeProcessByOrg1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("invokeProcessAndAddCustActReturn")]
        public string invokeProcessAndAddCustAct(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pFormDefOID, string pFormFieldValue, string pSubject, string pPostPSActDefsAsXML) {
            object[] results = this.Invoke("invokeProcessAndAddCustAct", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pFormDefOID,
                        pFormFieldValue,
                        pSubject,
                        pPostPSActDefsAsXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeProcessAndAddCustActAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pFormDefOID, string pFormFieldValue, string pSubject, string pPostPSActDefsAsXML) {
            this.invokeProcessAndAddCustActAsync(pProcessPackageId, pRequesterId, pOrgUnitId, pFormDefOID, pFormFieldValue, pSubject, pPostPSActDefsAsXML, null);
        }
        
        /// <remarks/>
        public void invokeProcessAndAddCustActAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pFormDefOID, string pFormFieldValue, string pSubject, string pPostPSActDefsAsXML, object userState) {
            if ((this.invokeProcessAndAddCustActOperationCompleted == null)) {
                this.invokeProcessAndAddCustActOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeProcessAndAddCustActOperationCompleted);
            }
            this.InvokeAsync("invokeProcessAndAddCustAct", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pFormDefOID,
                        pFormFieldValue,
                        pSubject,
                        pPostPSActDefsAsXML}, this.invokeProcessAndAddCustActOperationCompleted, userState);
        }
        
        private void OninvokeProcessAndAddCustActOperationCompleted(object arg) {
            if ((this.invokeProcessAndAddCustActCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeProcessAndAddCustActCompleted(this, new invokeProcessAndAddCustActCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("invokeProcessAndAddCustActByOrgReturn")]
        public string invokeProcessAndAddCustActByOrg(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pFormDefOID, string pFormFieldValue, string pSubject, string pPostPSActDefsAsXML) {
            object[] results = this.Invoke("invokeProcessAndAddCustActByOrg", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pOrgId,
                        pFormDefOID,
                        pFormFieldValue,
                        pSubject,
                        pPostPSActDefsAsXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeProcessAndAddCustActByOrgAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pFormDefOID, string pFormFieldValue, string pSubject, string pPostPSActDefsAsXML) {
            this.invokeProcessAndAddCustActByOrgAsync(pProcessPackageId, pRequesterId, pOrgUnitId, pOrgId, pFormDefOID, pFormFieldValue, pSubject, pPostPSActDefsAsXML, null);
        }
        
        /// <remarks/>
        public void invokeProcessAndAddCustActByOrgAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pFormDefOID, string pFormFieldValue, string pSubject, string pPostPSActDefsAsXML, object userState) {
            if ((this.invokeProcessAndAddCustActByOrgOperationCompleted == null)) {
                this.invokeProcessAndAddCustActByOrgOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeProcessAndAddCustActByOrgOperationCompleted);
            }
            this.InvokeAsync("invokeProcessAndAddCustActByOrg", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pOrgId,
                        pFormDefOID,
                        pFormFieldValue,
                        pSubject,
                        pPostPSActDefsAsXML}, this.invokeProcessAndAddCustActByOrgOperationCompleted, userState);
        }
        
        private void OninvokeProcessAndAddCustActByOrgOperationCompleted(object arg) {
            if ((this.invokeProcessAndAddCustActByOrgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeProcessAndAddCustActByOrgCompleted(this, new invokeProcessAndAddCustActByOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("invokeProcessByParameterReturn")]
        public string invokeProcessByParameter(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pParameterId, string pInvokeParameter, string pSubject) {
            object[] results = this.Invoke("invokeProcessByParameter", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pParameterId,
                        pInvokeParameter,
                        pSubject});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeProcessByParameterAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pParameterId, string pInvokeParameter, string pSubject) {
            this.invokeProcessByParameterAsync(pProcessPackageId, pRequesterId, pOrgUnitId, pParameterId, pInvokeParameter, pSubject, null);
        }
        
        /// <remarks/>
        public void invokeProcessByParameterAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pParameterId, string pInvokeParameter, string pSubject, object userState) {
            if ((this.invokeProcessByParameterOperationCompleted == null)) {
                this.invokeProcessByParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeProcessByParameterOperationCompleted);
            }
            this.InvokeAsync("invokeProcessByParameter", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pParameterId,
                        pInvokeParameter,
                        pSubject}, this.invokeProcessByParameterOperationCompleted, userState);
        }
        
        private void OninvokeProcessByParameterOperationCompleted(object arg) {
            if ((this.invokeProcessByParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeProcessByParameterCompleted(this, new invokeProcessByParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("invokeProcessByParameterByOrgReturn")]
        public string invokeProcessByParameterByOrg(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pParameterId, string pInvokeParameter, string pSubject) {
            object[] results = this.Invoke("invokeProcessByParameterByOrg", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pOrgId,
                        pParameterId,
                        pInvokeParameter,
                        pSubject});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeProcessByParameterByOrgAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pParameterId, string pInvokeParameter, string pSubject) {
            this.invokeProcessByParameterByOrgAsync(pProcessPackageId, pRequesterId, pOrgUnitId, pOrgId, pParameterId, pInvokeParameter, pSubject, null);
        }
        
        /// <remarks/>
        public void invokeProcessByParameterByOrgAsync(string pProcessPackageId, string pRequesterId, string pOrgUnitId, string pOrgId, string pParameterId, string pInvokeParameter, string pSubject, object userState) {
            if ((this.invokeProcessByParameterByOrgOperationCompleted == null)) {
                this.invokeProcessByParameterByOrgOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeProcessByParameterByOrgOperationCompleted);
            }
            this.InvokeAsync("invokeProcessByParameterByOrg", new object[] {
                        pProcessPackageId,
                        pRequesterId,
                        pOrgUnitId,
                        pOrgId,
                        pParameterId,
                        pInvokeParameter,
                        pSubject}, this.invokeProcessByParameterByOrgOperationCompleted, userState);
        }
        
        private void OninvokeProcessByParameterByOrgOperationCompleted(object arg) {
            if ((this.invokeProcessByParameterByOrgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeProcessByParameterByOrgCompleted(this, new invokeProcessByParameterByOrgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("getFormFieldTemplateReturn")]
        public string getFormFieldTemplate(string pFormDefinitionOID) {
            object[] results = this.Invoke("getFormFieldTemplate", new object[] {
                        pFormDefinitionOID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getFormFieldTemplateAsync(string pFormDefinitionOID) {
            this.getFormFieldTemplateAsync(pFormDefinitionOID, null);
        }
        
        /// <remarks/>
        public void getFormFieldTemplateAsync(string pFormDefinitionOID, object userState) {
            if ((this.getFormFieldTemplateOperationCompleted == null)) {
                this.getFormFieldTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFormFieldTemplateOperationCompleted);
            }
            this.InvokeAsync("getFormFieldTemplate", new object[] {
                        pFormDefinitionOID}, this.getFormFieldTemplateOperationCompleted, userState);
        }
        
        private void OngetFormFieldTemplateOperationCompleted(object arg) {
            if ((this.getFormFieldTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFormFieldTemplateCompleted(this, new getFormFieldTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchFullProcInstanceWithSerialNoShowReferencesReturn")]
        public string fetchFullProcInstanceWithSerialNoShowReferences(string pProcessInstanceSerialNo, bool pShowReferences) {
            object[] results = this.Invoke("fetchFullProcInstanceWithSerialNoShowReferences", new object[] {
                        pProcessInstanceSerialNo,
                        pShowReferences});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchFullProcInstanceWithSerialNoShowReferencesAsync(string pProcessInstanceSerialNo, bool pShowReferences) {
            this.fetchFullProcInstanceWithSerialNoShowReferencesAsync(pProcessInstanceSerialNo, pShowReferences, null);
        }
        
        /// <remarks/>
        public void fetchFullProcInstanceWithSerialNoShowReferencesAsync(string pProcessInstanceSerialNo, bool pShowReferences, object userState) {
            if ((this.fetchFullProcInstanceWithSerialNoShowReferencesOperationCompleted == null)) {
                this.fetchFullProcInstanceWithSerialNoShowReferencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchFullProcInstanceWithSerialNoShowReferencesOperationCompleted);
            }
            this.InvokeAsync("fetchFullProcInstanceWithSerialNoShowReferences", new object[] {
                        pProcessInstanceSerialNo,
                        pShowReferences}, this.fetchFullProcInstanceWithSerialNoShowReferencesOperationCompleted, userState);
        }
        
        private void OnfetchFullProcInstanceWithSerialNoShowReferencesOperationCompleted(object arg) {
            if ((this.fetchFullProcInstanceWithSerialNoShowReferencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchFullProcInstanceWithSerialNoShowReferencesCompleted(this, new fetchFullProcInstanceWithSerialNoShowReferencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("importOrganizationDataReturn")]
        public string importOrganizationData(string pXMLData) {
            object[] results = this.Invoke("importOrganizationData", new object[] {
                        pXMLData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void importOrganizationDataAsync(string pXMLData) {
            this.importOrganizationDataAsync(pXMLData, null);
        }
        
        /// <remarks/>
        public void importOrganizationDataAsync(string pXMLData, object userState) {
            if ((this.importOrganizationDataOperationCompleted == null)) {
                this.importOrganizationDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimportOrganizationDataOperationCompleted);
            }
            this.InvokeAsync("importOrganizationData", new object[] {
                        pXMLData}, this.importOrganizationDataOperationCompleted, userState);
        }
        
        private void OnimportOrganizationDataOperationCompleted(object arg) {
            if ((this.importOrganizationDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.importOrganizationDataCompleted(this, new importOrganizationDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void assigneeReassignWorkItem(string pRequesterOID, string pAcceptorOID, string pWorkItemOID, string pReassignComment) {
            this.Invoke("assigneeReassignWorkItem", new object[] {
                        pRequesterOID,
                        pAcceptorOID,
                        pWorkItemOID,
                        pReassignComment});
        }
        
        /// <remarks/>
        public void assigneeReassignWorkItemAsync(string pRequesterOID, string pAcceptorOID, string pWorkItemOID, string pReassignComment) {
            this.assigneeReassignWorkItemAsync(pRequesterOID, pAcceptorOID, pWorkItemOID, pReassignComment, null);
        }
        
        /// <remarks/>
        public void assigneeReassignWorkItemAsync(string pRequesterOID, string pAcceptorOID, string pWorkItemOID, string pReassignComment, object userState) {
            if ((this.assigneeReassignWorkItemOperationCompleted == null)) {
                this.assigneeReassignWorkItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnassigneeReassignWorkItemOperationCompleted);
            }
            this.InvokeAsync("assigneeReassignWorkItem", new object[] {
                        pRequesterOID,
                        pAcceptorOID,
                        pWorkItemOID,
                        pReassignComment}, this.assigneeReassignWorkItemOperationCompleted, userState);
        }
        
        private void OnassigneeReassignWorkItemOperationCompleted(object arg) {
            if ((this.assigneeReassignWorkItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.assigneeReassignWorkItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        public void addUserAbsence(string pUserId, string pStartTime, string pEndTime) {
            this.Invoke("addUserAbsence", new object[] {
                        pUserId,
                        pStartTime,
                        pEndTime});
        }
        
        /// <remarks/>
        public void addUserAbsenceAsync(string pUserId, string pStartTime, string pEndTime) {
            this.addUserAbsenceAsync(pUserId, pStartTime, pEndTime, null);
        }
        
        /// <remarks/>
        public void addUserAbsenceAsync(string pUserId, string pStartTime, string pEndTime, object userState) {
            if ((this.addUserAbsenceOperationCompleted == null)) {
                this.addUserAbsenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUserAbsenceOperationCompleted);
            }
            this.InvokeAsync("addUserAbsence", new object[] {
                        pUserId,
                        pStartTime,
                        pEndTime}, this.addUserAbsenceOperationCompleted, userState);
        }
        
        private void OnaddUserAbsenceOperationCompleted(object arg) {
            if ((this.addUserAbsenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUserAbsenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchProcessContextVariableReturn")]
        public string fetchProcessContextVariable(string pProcessSerialNo, string pVariableId) {
            object[] results = this.Invoke("fetchProcessContextVariable", new object[] {
                        pProcessSerialNo,
                        pVariableId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchProcessContextVariableAsync(string pProcessSerialNo, string pVariableId) {
            this.fetchProcessContextVariableAsync(pProcessSerialNo, pVariableId, null);
        }
        
        /// <remarks/>
        public void fetchProcessContextVariableAsync(string pProcessSerialNo, string pVariableId, object userState) {
            if ((this.fetchProcessContextVariableOperationCompleted == null)) {
                this.fetchProcessContextVariableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchProcessContextVariableOperationCompleted);
            }
            this.InvokeAsync("fetchProcessContextVariable", new object[] {
                        pProcessSerialNo,
                        pVariableId}, this.fetchProcessContextVariableOperationCompleted, userState);
        }
        
        private void OnfetchProcessContextVariableOperationCompleted(object arg) {
            if ((this.fetchProcessContextVariableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchProcessContextVariableCompleted(this, new fetchProcessContextVariableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="fetchProcessContextVariable1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchProcessContextVariableReturn")]
        public string fetchProcessContextVariable(string pProcessSerialNo, string pVariableId, bool pOnlyTextValue) {
            object[] results = this.Invoke("fetchProcessContextVariable1", new object[] {
                        pProcessSerialNo,
                        pVariableId,
                        pOnlyTextValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchProcessContextVariable1Async(string pProcessSerialNo, string pVariableId, bool pOnlyTextValue) {
            this.fetchProcessContextVariable1Async(pProcessSerialNo, pVariableId, pOnlyTextValue, null);
        }
        
        /// <remarks/>
        public void fetchProcessContextVariable1Async(string pProcessSerialNo, string pVariableId, bool pOnlyTextValue, object userState) {
            if ((this.fetchProcessContextVariable1OperationCompleted == null)) {
                this.fetchProcessContextVariable1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchProcessContextVariable1OperationCompleted);
            }
            this.InvokeAsync("fetchProcessContextVariable1", new object[] {
                        pProcessSerialNo,
                        pVariableId,
                        pOnlyTextValue}, this.fetchProcessContextVariable1OperationCompleted, userState);
        }
        
        private void OnfetchProcessContextVariable1OperationCompleted(object arg) {
            if ((this.fetchProcessContextVariable1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchProcessContextVariable1Completed(this, new fetchProcessContextVariable1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchProcessAbortOrTerminateCommentReturn")]
        public string fetchProcessAbortOrTerminateComment(string pProcessSerialNo) {
            object[] results = this.Invoke("fetchProcessAbortOrTerminateComment", new object[] {
                        pProcessSerialNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void fetchProcessAbortOrTerminateCommentAsync(string pProcessSerialNo) {
            this.fetchProcessAbortOrTerminateCommentAsync(pProcessSerialNo, null);
        }
        
        /// <remarks/>
        public void fetchProcessAbortOrTerminateCommentAsync(string pProcessSerialNo, object userState) {
            if ((this.fetchProcessAbortOrTerminateCommentOperationCompleted == null)) {
                this.fetchProcessAbortOrTerminateCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchProcessAbortOrTerminateCommentOperationCompleted);
            }
            this.InvokeAsync("fetchProcessAbortOrTerminateComment", new object[] {
                        pProcessSerialNo}, this.fetchProcessAbortOrTerminateCommentOperationCompleted, userState);
        }
        
        private void OnfetchProcessAbortOrTerminateCommentOperationCompleted(object arg) {
            if ((this.fetchProcessAbortOrTerminateCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchProcessAbortOrTerminateCommentCompleted(this, new fetchProcessAbortOrTerminateCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("checkWorkItemStateReturn")]
        public int checkWorkItemState(string pWorkItemOID) {
            object[] results = this.Invoke("checkWorkItemState", new object[] {
                        pWorkItemOID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void checkWorkItemStateAsync(string pWorkItemOID) {
            this.checkWorkItemStateAsync(pWorkItemOID, null);
        }
        
        /// <remarks/>
        public void checkWorkItemStateAsync(string pWorkItemOID, object userState) {
            if ((this.checkWorkItemStateOperationCompleted == null)) {
                this.checkWorkItemStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckWorkItemStateOperationCompleted);
            }
            this.InvokeAsync("checkWorkItemState", new object[] {
                        pWorkItemOID}, this.checkWorkItemStateOperationCompleted, userState);
        }
        
        private void OncheckWorkItemStateOperationCompleted(object arg) {
            if ((this.checkWorkItemStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkWorkItemStateCompleted(this, new checkWorkItemStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("addLabelToNoticeWorkItemReturn")]
        public bool addLabelToNoticeWorkItem(string pWorkItemOID, string pUserOID, string pLabelOID) {
            object[] results = this.Invoke("addLabelToNoticeWorkItem", new object[] {
                        pWorkItemOID,
                        pUserOID,
                        pLabelOID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addLabelToNoticeWorkItemAsync(string pWorkItemOID, string pUserOID, string pLabelOID) {
            this.addLabelToNoticeWorkItemAsync(pWorkItemOID, pUserOID, pLabelOID, null);
        }
        
        /// <remarks/>
        public void addLabelToNoticeWorkItemAsync(string pWorkItemOID, string pUserOID, string pLabelOID, object userState) {
            if ((this.addLabelToNoticeWorkItemOperationCompleted == null)) {
                this.addLabelToNoticeWorkItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddLabelToNoticeWorkItemOperationCompleted);
            }
            this.InvokeAsync("addLabelToNoticeWorkItem", new object[] {
                        pWorkItemOID,
                        pUserOID,
                        pLabelOID}, this.addLabelToNoticeWorkItemOperationCompleted, userState);
        }
        
        private void OnaddLabelToNoticeWorkItemOperationCompleted(object arg) {
            if ((this.addLabelToNoticeWorkItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addLabelToNoticeWorkItemCompleted(this, new addLabelToNoticeWorkItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("removeLabelFromNoticeWorkItemReturn")]
        public bool removeLabelFromNoticeWorkItem(string pWorkItemOID, string pUserOID, string pLabelOID) {
            object[] results = this.Invoke("removeLabelFromNoticeWorkItem", new object[] {
                        pWorkItemOID,
                        pUserOID,
                        pLabelOID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void removeLabelFromNoticeWorkItemAsync(string pWorkItemOID, string pUserOID, string pLabelOID) {
            this.removeLabelFromNoticeWorkItemAsync(pWorkItemOID, pUserOID, pLabelOID, null);
        }
        
        /// <remarks/>
        public void removeLabelFromNoticeWorkItemAsync(string pWorkItemOID, string pUserOID, string pLabelOID, object userState) {
            if ((this.removeLabelFromNoticeWorkItemOperationCompleted == null)) {
                this.removeLabelFromNoticeWorkItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveLabelFromNoticeWorkItemOperationCompleted);
            }
            this.InvokeAsync("removeLabelFromNoticeWorkItem", new object[] {
                        pWorkItemOID,
                        pUserOID,
                        pLabelOID}, this.removeLabelFromNoticeWorkItemOperationCompleted, userState);
        }
        
        private void OnremoveLabelFromNoticeWorkItemOperationCompleted(object arg) {
            if ((this.removeLabelFromNoticeWorkItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeLabelFromNoticeWorkItemCompleted(this, new removeLabelFromNoticeWorkItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://webservice.nana.dsc.com/", ResponseNamespace="http://webservice.nana.dsc.com/")]
        [return: System.Xml.Serialization.SoapElementAttribute("fetchWorkItemCountReturn")]
        public int fetchWorkItemCount(string pUserID, int pAccessCondition, string pViewTimesType) {
            object[] results = this.Invoke("fetchWorkItemCount", new object[] {
                        pUserID,
                        pAccessCondition,
                        pViewTimesType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void fetchWorkItemCountAsync(string pUserID, int pAccessCondition, string pViewTimesType) {
            this.fetchWorkItemCountAsync(pUserID, pAccessCondition, pViewTimesType, null);
        }
        
        /// <remarks/>
        public void fetchWorkItemCountAsync(string pUserID, int pAccessCondition, string pViewTimesType, object userState) {
            if ((this.fetchWorkItemCountOperationCompleted == null)) {
                this.fetchWorkItemCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfetchWorkItemCountOperationCompleted);
            }
            this.InvokeAsync("fetchWorkItemCount", new object[] {
                        pUserID,
                        pAccessCondition,
                        pViewTimesType}, this.fetchWorkItemCountOperationCompleted, userState);
        }
        
        private void OnfetchWorkItemCountOperationCompleted(object arg) {
            if ((this.fetchWorkItemCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fetchWorkItemCountCompleted(this, new fetchWorkItemCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void countWorkingTimeCompletedEventHandler(object sender, countWorkingTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class countWorkingTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal countWorkingTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void findManagerByAppLvlCompletedEventHandler(object sender, findManagerByAppLvlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findManagerByAppLvlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findManagerByAppLvlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addCustomActivityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addCustomParallelActivityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addCustomParallelAndSerialActivityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addCustomParallelAndSerialActivity1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void invokeProcessCompletedEventHandler(object sender, invokeProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void invokeProcess1CompletedEventHandler(object sender, invokeProcess1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeProcess1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeProcess1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void completeWorkItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void removeAbsenceRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchDueDateCompletedEventHandler(object sender, fetchDueDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchDueDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchDueDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void reexecuteActivityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getProcessPackageCompletedEventHandler(object sender, getProcessPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProcessPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProcessPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchOrgUnitOfUserIdCompletedEventHandler(object sender, fetchOrgUnitOfUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchOrgUnitOfUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchOrgUnitOfUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getProjectsWithOrganizationIdCompletedEventHandler(object sender, getProjectsWithOrganizationIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectsWithOrganizationIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectsWithOrganizationIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void countWorkingDaysCompletedEventHandler(object sender, countWorkingDaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class countWorkingDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal countWorkingDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void updateDefaultSubstituteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getSubstituteStateCompletedEventHandler(object sender, getSubstituteStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSubstituteStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSubstituteStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchDefaultSubstituteInfoCompletedEventHandler(object sender, fetchDefaultSubstituteInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchDefaultSubstituteInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchDefaultSubstituteInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchDefaultSubstituteInfo1CompletedEventHandler(object sender, fetchDefaultSubstituteInfo1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchDefaultSubstituteInfo1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchDefaultSubstituteInfo1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void findFormOIDsOfProcessCompletedEventHandler(object sender, findFormOIDsOfProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findFormOIDsOfProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findFormOIDsOfProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void reserveNoCmDocumentCompletedEventHandler(object sender, reserveNoCmDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class reserveNoCmDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal reserveNoCmDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void bypassActivityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void abortProcessForSerialNoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void acceptWorkItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void terminatedProcessForSerialNoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void managementReassignWorkItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void assignRelevantDataBySerialNoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void managementChangeWorkItemOwnerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addCloneSerialActivityCompletedEventHandler(object sender, addCloneSerialActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addCloneSerialActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addCloneSerialActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void isPerformerOfProcessInstanceCompletedEventHandler(object sender, isPerformerOfProcessInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isPerformerOfProcessInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isPerformerOfProcessInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchFullProcInstanceWithOIDCompletedEventHandler(object sender, fetchFullProcInstanceWithOIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchFullProcInstanceWithOIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchFullProcInstanceWithOIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchFullProcInstanceWithSerialNoCompletedEventHandler(object sender, fetchFullProcInstanceWithSerialNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchFullProcInstanceWithSerialNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchFullProcInstanceWithSerialNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchProcInstanceWithOIDCompletedEventHandler(object sender, fetchProcInstanceWithOIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchProcInstanceWithOIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchProcInstanceWithOIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchProcInstancesCompletedEventHandler(object sender, fetchProcInstancesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchProcInstancesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchProcInstancesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchClosedProcInstancesCompletedEventHandler(object sender, fetchClosedProcInstancesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchClosedProcInstancesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchClosedProcInstancesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchProcInstanceWithSerialNoCompletedEventHandler(object sender, fetchProcInstanceWithSerialNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchProcInstanceWithSerialNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchProcInstanceWithSerialNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchFormInstanceWithProcOIDCompletedEventHandler(object sender, fetchFormInstanceWithProcOIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchFormInstanceWithProcOIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchFormInstanceWithProcOIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchFormInstanceWithProcSerlNoCompletedEventHandler(object sender, fetchFormInstanceWithProcSerlNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchFormInstanceWithProcSerlNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchFormInstanceWithProcSerlNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchUniFormatFormInstanceWithProcOIDCompletedEventHandler(object sender, fetchUniFormatFormInstanceWithProcOIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchUniFormatFormInstanceWithProcOIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchUniFormatFormInstanceWithProcOIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchUniFormatFormInstanceWithProcSerlNoCompletedEventHandler(object sender, fetchUniFormatFormInstanceWithProcSerlNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchUniFormatFormInstanceWithProcSerlNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchUniFormatFormInstanceWithProcSerlNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchProcSNMatchCurrtentPerformerCompletedEventHandler(object sender, fetchProcSNMatchCurrtentPerformerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchProcSNMatchCurrtentPerformerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchProcSNMatchCurrtentPerformerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchCanTraceProcSNCompletedEventHandler(object sender, fetchCanTraceProcSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchCanTraceProcSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchCanTraceProcSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchToDoWorkItemCompletedEventHandler(object sender, fetchToDoWorkItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchToDoWorkItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchToDoWorkItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void increaseViewTimesOfWorkAssignmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void invokeProcessByOrgCompletedEventHandler(object sender, invokeProcessByOrgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeProcessByOrgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeProcessByOrgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void invokeProcessByOrg1CompletedEventHandler(object sender, invokeProcessByOrg1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeProcessByOrg1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeProcessByOrg1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void invokeProcessAndAddCustActCompletedEventHandler(object sender, invokeProcessAndAddCustActCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeProcessAndAddCustActCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeProcessAndAddCustActCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void invokeProcessAndAddCustActByOrgCompletedEventHandler(object sender, invokeProcessAndAddCustActByOrgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeProcessAndAddCustActByOrgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeProcessAndAddCustActByOrgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void invokeProcessByParameterCompletedEventHandler(object sender, invokeProcessByParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeProcessByParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeProcessByParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void invokeProcessByParameterByOrgCompletedEventHandler(object sender, invokeProcessByParameterByOrgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeProcessByParameterByOrgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeProcessByParameterByOrgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getFormFieldTemplateCompletedEventHandler(object sender, getFormFieldTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFormFieldTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFormFieldTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchFullProcInstanceWithSerialNoShowReferencesCompletedEventHandler(object sender, fetchFullProcInstanceWithSerialNoShowReferencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchFullProcInstanceWithSerialNoShowReferencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchFullProcInstanceWithSerialNoShowReferencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void importOrganizationDataCompletedEventHandler(object sender, importOrganizationDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class importOrganizationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal importOrganizationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void assigneeReassignWorkItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addUserAbsenceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchProcessContextVariableCompletedEventHandler(object sender, fetchProcessContextVariableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchProcessContextVariableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchProcessContextVariableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchProcessContextVariable1CompletedEventHandler(object sender, fetchProcessContextVariable1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchProcessContextVariable1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchProcessContextVariable1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchProcessAbortOrTerminateCommentCompletedEventHandler(object sender, fetchProcessAbortOrTerminateCommentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchProcessAbortOrTerminateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchProcessAbortOrTerminateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void checkWorkItemStateCompletedEventHandler(object sender, checkWorkItemStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkWorkItemStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkWorkItemStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void addLabelToNoticeWorkItemCompletedEventHandler(object sender, addLabelToNoticeWorkItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addLabelToNoticeWorkItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addLabelToNoticeWorkItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void removeLabelFromNoticeWorkItemCompletedEventHandler(object sender, removeLabelFromNoticeWorkItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeLabelFromNoticeWorkItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeLabelFromNoticeWorkItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void fetchWorkItemCountCompletedEventHandler(object sender, fetchWorkItemCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fetchWorkItemCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fetchWorkItemCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591